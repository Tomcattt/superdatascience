dataset = read.csv('/Users/quentin/Documents/AI/UDEMY_ML/Machine Learning A-Z Template Folder/Part 1 - Data Preprocessing/data.csv')
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age,FUN = function(x) mean(x,na.rm = TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary,FUN = function(x) mean(x,na.rm = TRUE)),
dataset$Salary)
dataset$Country = factor(dataset$Country,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3))
dataset$Purchased = factor(dataset$Purchased,
levels = c('Yes', 'No'),
labels = c(1,0))
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased,SplitRatio = 0.8)
training_set = subset(dataset,split == TRUE)
test_set = subset(dataset,split == FALSE)
training_set[,2:3] = scale(training_set[,2:3])
test_set[,2:3] = scale(test_set[,2:3])
setwd("/Users/quentin/Documents/AI/UDEMY_ML/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 4 - Simple Linear Regression")
# Importing the dataset
dataset = read.csv('Salary_Data.csv')
#dataset = dataset[, 2:3]
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary,SplitRatio = 2/3)
training_set = subset(dataset,split == TRUE)
test_set = subset(dataset,split == FALSE)
setwd("/Users/quentin/Documents/AI/UDEMY_ML/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 4 - Simple Linear Regression")
# Importing the dataset
dataset = read.csv('Salary_Data.csv')
#dataset = dataset[, 2:3]
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary,SplitRatio = 2/3)
training_set = subset(dataset,split == TRUE)
test_set = subset(dataset,split == FALSE)
regressor = lm(formula = Salary ~ YearsExperience,
data = training_set)
y_predict = predict(regressor, newdata = test_set)
library(ggplot2)
ggplot() +
geom_point(aes(x = training_set$YearsExperience,
y = training_set$Salary),
colour = 'red') +
geom_line(aes(x = training_set$YearsExperience,
y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('Salary vs Experience (Training Set)') +
xlab('Years of experience') +
ylab('Salary')
ggplot() +
geom_point(aes(x = test_set$YearsExperience,
y = test_set$Salary),
colour = 'red') +
geom_line(aes(x = training_set$YearsExperience,
y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('Salary vs Experience (Test Set)') +
xlab('Years of experience') +
ylab('Salary')
dataset2 = read.csv('/Users/quentin/Documents/AI/UDEMY_ML/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 5 - Multiple Linear Regression/50_Startups.csv')
dataset2$State = factor(dataset$State,
levels = c('New York', 'California', 'Florida'),
labels = c(1, 2, 3))
# regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend . State)
regressor = lm(formula = Profit ~ . ,
data = training_set)
dataset2 = read.csv('/Users/quentin/Documents/AI/UDEMY_ML/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 5 - Multiple Linear Regression/50_Startups.csv')
dataset2$State = factor(dataset2$State,
levels = c('New York', 'California', 'Florida'),
labels = c(1, 2, 3))
library(caTools)
set.seed(123)
split = sample.split(dataset2$Profit,SplitRatio = 0.8)
training_set = subset(dataset2,split == TRUE)
test_set = subset(dataset2,split == FALSE)
# No need of scaling for linear regressions
# regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend . State)
regressor = lm(formula = Profit ~ . ,
data = training_set)
summary(regressor)
# regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend . State)
regressor = lm(formula = Profit ~ R.D.Spend ,
data = training_set)
y_pred = predict(regressor, newdata = test_set)
backwardElimination <- function(x, sl) {
numVars = length(x)
for (i in c(1:numVars)){
regressor = lm(formula = Profit ~ ., data = x)
maxVar = max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
if (maxVar > sl){
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"] == maxVar)
x = x[, -j]
}
numVars = numVars - 1
}
return(summary(regressor))
}
SL = 0.05
dataset = dataset[, c(1,2,3,4,5)]
dataset = read.csv('/Users/quentin/Documents/AI/UDEMY_ML/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 6 - Polynomial Regression/Position_Salaries.csv')
dataset = dataset[2:3]
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
dataset$Level4 = dataset$Level^4
poly_reg = lm(formula = Salary ~ .,
data = dataset)
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level,
y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level,
y = predict(poly_reg, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or bluff') +
xlab('Level') +
ylab('Salary')
y_pred = predict(poly_reg, data.frame(Level = 6.5,
Level2 = 6.5^2,
Level3 = 6.5^3,
Level4 = 6.5^4))
setwd("~/Documents/AI/UDEMY_ML/Machine Learning A-Z Template Folder")
dataset = read.csv('/Users/quentin/Documents/AI/UDEMY_ML/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 6 - Polynomial Regression/Position_Salaries.csv')
dataset = dataset[2:3]
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
dataset$Level4 = dataset$Level^4
poly_reg = lm(formula = Salary ~ .,
data = dataset)
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level),0.1)
ggplot() +
geom_point(aes(x = dataset$Level,
y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level,
y = predict(poly_reg, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or bluff') +
xlab('Level') +
ylab('Salary')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level),0.1)
ggplot() +
geom_point(aes(x = dataset$Level,
y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level,
y = predict(poly_reg, newdata = data.frame(Level = x_grid,
Level2 = x_grid^2
Level3 = x_gred^3
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level),0.1)
ggplot() +
geom_point(aes(x = dataset$Level,
y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level,
y = predict(poly_reg, newdata = data.frame(Level = x_grid,
Level2 = x_grid^2,
Level3 = x_gred^3,
Level4 = x_gred^4))),
colour = 'blue') +
ggtitle('Truth or bluff') +
xlab('Level') +
ylab('Salary')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level),0.1)
ggplot() +
geom_point(aes(x = dataset$Level,
y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level,
y = predict(poly_reg, newdata = data.frame(Level = x_grid,
Level2 = x_grid^2,
Level3 = x_grid^3,
Level4 = x_grid^4))),
colour = 'blue') +
ggtitle('Truth or bluff') +
xlab('Level') +
ylab('Salary')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level),0.1)
ggplot() +
geom_point(aes(x = dataset$Level,
y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level,
y = predict(poly_reg, (data.frame(Level = x_grid),
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level),0.1)
ggplot() +
geom_point(aes(x = dataset$Level,
y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level,
y = predict(poly_reg, (data.frame(Level = x_grid)))),
colour = 'blue') +
ggtitle('Truth or bluff') +
xlab('Level') +
ylab('Salary')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level),0.1)
ggplot() +
geom_point(aes(x = dataset$Level,
y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level,
y = predict(poly_reg, (data.frame(Level = x_grid & Level2 = x_grid^2)))),
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level),0.1)
ggplot() +
geom_point(aes(x = dataset$Level,
y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level,
y = predict(poly_reg, (data.frame(Level = x_grid,Level2 = x_grid^2)))),
colour = 'blue') +
ggtitle('Truth or bluff') +
xlab('Level') +
ylab('Salary')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level),0.1)
ggplot() +
geom_point(aes(x = dataset$Level,
y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level,
y = predict(poly_reg, (data.frame(Level = x_grid,
Level2 = x_grid^2,
Level3 = x_grid^3,
Level4 = x_grid^4)))),
colour = 'blue') +
ggtitle('Truth or bluff') +
xlab('Level') +
ylab('Salary')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level),0.1)
ggplot() +
geom_point(aes(x = dataset$Level,
y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid,
y = predict(poly_reg, (data.frame(Level = x_grid,
Level2 = x_grid^2,
Level3 = x_grid^3,
Level4 = x_grid^4)))),
colour = 'blue') +
ggtitle('Truth or bluff') +
xlab('Level') +
ylab('Salary')
View(dataset)
View(dataset)
View(dataset)
install.packages('e1071)
install.packages('e1071')
library(e1071)
# REGRESSION TEMPLATE R
dataset = read.csv('/Users/quentin/Documents/AI/UDEMY_ML/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 7 - Support Vector Regression (SVR)/Position_Salaries.csv')
dataset = dataset[2:3]
library(caTools)
#set.seed(123)
#split = sample.split(dataset$Purchased,SplitRatio = 0.8)
#training_set = subset(dataset,split == TRUE)
#test_set = subset(dataset,split == FALSE)
# SCALING
# training_set[,2:3] = scale(training_set[,2:3])
# test_set[,2:3] = scale(test_set[,2:3])
# FITTING THE SVR MODEL TO THE DATASET
# install.packages('e1071')
library(e1071)
regressor = svm(formula = Salary ~ .,
data = dataset,
type = 'eps-regression')
# PREDICTING A NEW RESULT
y_pred = predict(regressor, data.frame(Level = 6.5))
# VISUALISING SMOOTHLY
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level),0.1)
ggplot() +
geom_point(aes(x = dataset$"x",
y = dataset$"y"),
colour = 'red') +
geom_line(aes(x = x_grid,
y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('FALSE OR TRUE, SVR REGRESSION') +
xlab('x') +
ylab('y')
View(dataset)
View(dataset)
# REGRESSION TEMPLATE R
dataset = read.csv('/Users/quentin/Documents/AI/UDEMY_ML/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 7 - Support Vector Regression (SVR)/Position_Salaries.csv')
dataset = dataset[2:3]
library(caTools)
#set.seed(123)
#split = sample.split(dataset$Purchased,SplitRatio = 0.8)
#training_set = subset(dataset,split == TRUE)
#test_set = subset(dataset,split == FALSE)
# SCALING
# training_set[,2:3] = scale(training_set[,2:3])
# test_set[,2:3] = scale(test_set[,2:3])
# FITTING THE SVR MODEL TO THE DATASET
# install.packages('e1071')
library(e1071)
regressor = svm(formula = Salary ~ .,
data = dataset,
type = 'eps-regression')
# PREDICTING A NEW RESULT
y_pred = predict(regressor, data.frame(Level = 6.5))
# VISUALISING SMOOTHLY
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level),0.1)
ggplot() +
geom_point(aes(x = dataset$Level,
y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid,
y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('FALSE OR TRUE, SVR REGRESSION') +
xlab('x') +
ylab('y')
# REGRESSION TEMPLATE R
dataset = read.csv('/Users/quentin/Documents/AI/UDEMY_ML/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 7 - Support Vector Regression (SVR)/Position_Salaries.csv')
dataset = dataset[2:3]
library(caTools)
#set.seed(123)
#split = sample.split(dataset$Purchased,SplitRatio = 0.8)
#training_set = subset(dataset,split == TRUE)
#test_set = subset(dataset,split == FALSE)
# SCALING
# training_set[,2:3] = scale(training_set[,2:3])
# test_set[,2:3] = scale(test_set[,2:3])
# FITTING THE SVR MODEL TO THE DATASET
# install.packages('e1071')
library(e1071)
regressor = svm(formula = Salary ~ .,
data = dataset,
type = 'eps-regression')
# PREDICTING A NEW RESULT
y_pred = predict(regressor, data.frame(Level = 6.5))
print(y_pred)
# VISUALISING SMOOTHLY
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level),0.1)
ggplot() +
geom_point(aes(x = dataset$Level,
y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid,
y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('FALSE OR TRUE, SVR REGRESSION') +
xlab('x') +
ylab('y')
